languages:
  - name: python
    label: Python
  - name: go
    label: Go
  - name: groovy
    label: Groovy
syntaxes:
  - category: declaration
    subcategories:
      - title: variable declaration
        details:
          - language: python
            example: |
              # Declare a variable
              variable_name = "value"
              number        = 42
              is_boolean    = True
            notes: >-
              Python uses dynamic typing, so there's no need to explicitly
              declare a variable type.
          - language: groovy
            example: |
              // Declare a variable
              def variableName = "value"
              def number = 42
              def isBoolean = true
            notes: >-
              Groovy uses `def` to declare a variable without specifying the
              type.
          - language: go
            example: |
              // Declare a variable
              var variableName = "value"
              var number int = 42
              var isBoolean bool = true
            notes: >-
              In Go, you can declare variables using `var` followed by the
              variable name and type.
      - title: Dynamic type and casting
        details:
          - language: python
            example: |-
              x = str(10)    # x will be '10'
              y = int(10)    # y will be 10 
              z = float(10)  # z will be 10.0

              # to see type. <class 'str'>
              print(type(x))
            notes: |-
              prints 
              <class 'str'>
          - language: go
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
          - language: groovy
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
      - title: Variable Memory
        details:
          - language: python
            example: |-
              # to see reference count
              print(sys.getrefcount(a))

              del a # delete reference
            notes: Garbage Collection and reference counting
          - language: go
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
          - language: groovy
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
      - title: function
        details:
          - language: python
            example: |-
              # Declare a function
              def greet(name):
                  return f"Hello, {name}!"

              # Calling a function
              print(greet("World"))
              # same string contents are shared 
            notes: >-
              Functions in Python are defined using the `def` keyword and can
              return values using the `return` statement.
          - language: groovy
            example: |
              // Declare a function
              def greet(name) {
                  return "Hello, ${name}!"
              }

              // Calling a function
              println greet("World")
            notes: >-
              Functions in Groovy are defined using the `def` keyword and do not
              require a return type.
          - language: go
            example: |
              // Declare a function
              func greet(name string) string {
                  return "Hello, " + name + "!"
              }

              // Calling a function
              fmt.Println(greet("World"))
            notes: >-
              Functions in Go are defined using the `func` keyword, and the
              return type is specified after the parameter list.
      - title: class
        details:
          - language: python
            example: |
              # Declare a class
              class Example:
                  def __init__(self, name, age):
                      self.name = name
                      self.age = age
                  
                  # Method
                  def display(self):
                      print(f"Name: {self.name}, Age: {self.age}")

              # Creating an instance
              example = Example("Alice", 30)
              example.display()
            notes: >-
              Python classes are defined using the `class` keyword and methods
              are defined with `def`.
          - language: groovy
            example: |
              // Declare a class
              class Example {
                  String name
                  int age
                  
                  // Constructor
                  Example(String name, int age) {
                      this.name = name
                      this.age = age
                  }
                  
                  // Method
                  void display() {
                      println "Name: ${name}, Age: ${age}"
                  }
              }
            notes: >-
              Groovy classes are similar to Java classes but with additional
              Groovy features.
          - language: go
            example: |
              // Declare a struct
              type Example struct {
                  Name string
                  Age  int
              }

              // Method
              func (e Example) Display() {
                  fmt.Printf("Name: %s, Age: %d\n", e.Name, e.Age)
              }

              // Creating an instance
              example := Example{Name: "Alice", Age: 30}
              example.Display()
            notes: >-
              Go does not have classes but uses structs to define data
              structures and methods are defined with receiver functions.
      - title: constant
        details:
          - language: python
            example: |
              # Declare a constant
              PI = 3.14159
              GRAVITY = 9.8
            notes: >-
              Python does not have built-in constant support, but by convention,
              constants are written in all uppercase letters.
          - language: groovy
            example: |
              // Declare a constant
              final PI = 3.14159
              final GRAVITY = 9.8
            notes: Groovy uses the `final` keyword to declare constants.
          - language: go
            example: |
              // Declare a constant
              const PI = 3.14159
              const GRAVITY = 9.8
            notes: Go uses the `const` keyword to declare constants.
      - title: array
        details:
          - language: python
            example: |
              # Declare an array
              numbers = [1, 2, 3, 4, 5]
              strings = ["a", "b", "c"]
            notes: >-
              Python uses lists to represent arrays, which can contain elements
              of different types.
          - language: groovy
            example: |
              // Declare an array
              def numbers = [1, 2, 3, 4, 5]
              def strings = ["a", "b", "c"]
            notes: >-
              Groovy uses lists to represent arrays, and elements can be of
              different types.
          - language: go
            example: |
              // Declare an array
              var numbers = [5]int{1, 2, 3, 4, 5}
              var strings = [3]string{"a", "b", "c"}
            notes: >-
              Go arrays have a fixed size and the type of elements must be
              specified.
      - title: dictionary
        details:
          - language: python
            example: |
              # Declare a dictionary
              person = {"name": "Alice", "age": 30}

              # Accessing dictionary elements
              print(person["name"])  # Output: Alice
            notes: Python uses dictionaries to store key-value pairs.
          - language: groovy
            example: |
              // Declare a map
              def person = [name: "Alice", age: 30]

              // Accessing map elements
              println person.name  // Output: Alice
            notes: Groovy uses maps to store key-value pairs.
          - language: go
            example: |
              // Declare a map
              var person = map[string]interface{}{"name": "Alice", "age": 30}

              // Accessing map elements
              fmt.Println(person["name"])  // Output: Alice
            notes: >-
              Go uses maps to store key-value pairs, with the key type and value
              type specified.
      - title: 'Miscellaneous   '
        details:
          - language: python
            example: |-
              # single line

              '''
              This is a multiline
              comment.
              '''
              # Multiple statement 
              import sys; x = 'foo'; sys.stdout.write(x + '\n')
            notes: Double click to update note
          - language: go
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
          - language: groovy
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
      - title: Double click to edit Title
        details:
          - language: python
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
          - language: go
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
          - language: groovy
            example: |-
              {
                Double click to add an example
              }
            notes: Double click to update note
  - category: declaration
    subcategories: []
  - category: declaration
    subcategories: []